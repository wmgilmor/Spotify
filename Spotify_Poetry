import requests as r
import pandas as pd
import datetime
import re


poem=open('C:\Users\MatthewGilmore\Desktop\poem3.txt').read()                   #open poem file
poem=re.sub(r"[^\w']", ' ', poem)                                               #remove punctuation except apostrophes
print poem



#######Song Lookup and Matching########

Name=[]
Song=[]
Date_Time=[]

def find_songs(terms):
    lines={'q':terms}
    data=r.get('http://ws.spotify.com/search/1/track.json',params=lines).json() #make request
    holder={}                                                                   #create holder for search results
    for x in data['tracks']:
        if x['name'].lower().strip() == terms.lower().strip():                  #identify matching songs
            p= str(x['href']).split(':')[-1]                                    #strip out song ID
            holder['http://open.spotify.com/track/'+p]=x['popularity']          #populate holder
            Song.append((max(holder, key=holder.get)))                          #select most popular song
            Name.append(terms)                                                  #add matched name to list
            Date_Time.append(datetime.datetime.now())                           #add time matched to list for later ordering
            return 1
          
          
          

######Iterations########

#This part of the code creates sequential combinations of the poem words and attempts to find a match using find_songs. 
#If a match is found, the matched words are removed from the word_list, and the loop restarts. 

#For example, take the word_list: ['let', 'it', 'be','please'].
#The loop creates strings of sequential combinations of the word_list, first using all items of the list and working backward.
#In this example:
#Loop 1 yields ['let it be please']---no match is found.
#Loop 2 yields ['let it be'] --- a match is found, the words are deleted from word_list, word_list=['please'].
#Loop 3 yields ['please']---a match is found, the word is removed, and the program exits the loop. 



word_list=poem.split()                                                          #tokenize poem into words
found_match=[]                                                                  #create list for matches
no_match=[]                                                                     #create list for non-matches

while True:                                                                     #restarts loop if match found
    for i in range(0, len(word_list)):                                          #selects ith item in list
        for j in reversed(range(i,len(word_list)+1)):                           #selects jth item in reversed list  
    	   words=" ".join(word_list[i:j])                                       #joins elements i through j in word_list
    	   if find_songs(words) ==1:                                            #if find_songs yields match 
    	       word_list[i:j]=" "                                               #delete elements i through j in word_list
    	       break                                                            #restart loop
    	   else:
    	       no_match.append(words)                                           #attach unmatched strings to no_match
    else: 
        break
        
        
        
        
        
#######Create Sorted Playlist#########               
final_data={ 'name':Name, 'song':Song, 'date_time':Date_Time}                   #set up data to load in DataFrame
Playlist= pd.DataFrame(final_data)                                              #load data into DataFrame
Playlist.sort('date_time')                                                      #sort playlist by date_time to structure like poem 
Playlist.pop('date_time')                                                       #drop date_time

while ' ' in word_list:
    word_list.remove(' ')                                                       #a little cleaning




######Print#######

print "The Playlist Is:"
print Playlist

print "No Match Found For Following Words:"
print word_list



	 
